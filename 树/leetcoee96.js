//动态规划
//n长度的有序序列的二叉排序树的种类数据即能组合的有效二叉排序树的个数
//从直观的角度思考，我怎么组合这些数字成为BST，思路：以每一个数字1到n各为根
//的BST数目相加即为所求结果，那么问题降一个纬度思考就是我选定的那个以i为根
//的BST的数目是多少？这个问题解决了，每一个i（1到n）根的BST加起来即可。好现在
//尝试解决以i为根的BST种类数目是多少呢？i为根固定了，但是i左边的树和i右边的树
//又是一个BST，那么左边的各种树的情况假设为m个，右边的各种树的情况假设为n个，那么
//以i为根的BST的个数就是m*n个了，继续跟踪发现我们要解决求出i的左子树的BST个数和
//右子树的BST个数，这样分析下去，发现规律：一个大的问题的解我要先去拆分该大问题，
//解决拆分的小问题之后利用小问题的解决来组合出大问题的解（类似分治）
var numTrees = function (n) {
    let dbTable = new Array(n + 1).fill(0)
    dbTable[0] = 1
    dbTable[1] = 1
    for (let i = 2; i <= n; i++) {
        for (let j = 1; j <= i; j++) {
            dbTable[i] += dbTable[j - 1] * dbTable[i - j]
        }
    }
    return dbTable[n]
};